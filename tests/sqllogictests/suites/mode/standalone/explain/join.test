statement ok
drop table if exists t

statement ok
drop table if exists t1

statement ok
drop table if exists t2

statement ok
create table t as select number from numbers(1)

statement ok
create table t1 as select number from numbers(10)

statement ok
create table t2 as select number from numbers(100)

query T
explain select t.number from t, t1 where t.number = t1.number
----
EvalScalar
├── expressions: [t.number (#0)]
├── estimated rows: 1.00
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t.number (#0)]
    ├── probe keys: [t1.number (#1)]
    ├── filters: []
    ├── estimated rows: 1.00
    ├── TableScan(Build)
    │   ├── table: default.default.t
    │   ├── read rows: 1
    │   ├── read bytes: 39
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.default.t1
        ├── read rows: 10
        ├── read bytes: 65
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 10.00

query T
explain select t.number from t, t1 where t.number = t1.number and t.number = t1.number + 1
----
EvalScalar
├── expressions: [t.number (#0)]
├── estimated rows: 1.00
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t.number (#0), t.number (#0)]
    ├── probe keys: [t1.number (#1), t1.number (#1) + 1]
    ├── filters: []
    ├── estimated rows: 1.00
    ├── TableScan(Build)
    │   ├── table: default.default.t
    │   ├── read rows: 1
    │   ├── read bytes: 39
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.default.t1
        ├── read rows: 10
        ├── read bytes: 65
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 10.00

query T
explain select t.number from t, t1 where t.number > 1 and 1 < t1.number
----
EvalScalar
├── expressions: [t.number (#0)]
├── estimated rows: 0.10
└── HashJoin
    ├── join type: CROSS
    ├── build keys: []
    ├── probe keys: []
    ├── filters: []
    ├── estimated rows: 0.10
    ├── Filter(Build)
    │   ├── filters: [t.number (#0) > 1]
    │   ├── estimated rows: 0.10
    │   └── TableScan
    │       ├── table: default.default.t
    │       ├── read rows: 0
    │       ├── read bytes: 0
    │       ├── partitions total: 1
    │       ├── partitions scanned: 0
    │       ├── pruning stats: [segments: <range pruning: 1 to 0>, blocks: <range pruning: 0 to 0, bloom pruning: 0 to 0>]
    │       ├── push downs: [filters: [t.number (#0) > 1], limit: NONE]
    │       └── estimated rows: 1.00
    └── Filter(Probe)
        ├── filters: [1 < t1.number (#1)]
        ├── estimated rows: 1.00
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 10
            ├── read bytes: 65
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            ├── push downs: [filters: [1 < t1.number (#1)], limit: NONE]
            └── estimated rows: 10.00

query T
explain select t.number from t, t1 where t.number + t1.number = 1
----
EvalScalar
├── expressions: [t.number (#0)]
├── estimated rows: 1.00
└── Filter
    ├── filters: [t.number (#0) + t1.number (#1) = 1]
    ├── estimated rows: 1.00
    └── HashJoin
        ├── join type: CROSS
        ├── build keys: []
        ├── probe keys: []
        ├── filters: []
        ├── estimated rows: 10.00
        ├── TableScan(Build)
        │   ├── table: default.default.t
        │   ├── read rows: 1
        │   ├── read bytes: 39
        │   ├── partitions total: 1
        │   ├── partitions scanned: 1
        │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
        │   ├── push downs: [filters: [], limit: NONE]
        │   └── estimated rows: 1.00
        └── TableScan(Probe)
            ├── table: default.default.t1
            ├── read rows: 10
            ├── read bytes: 65
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 10.00


query T
explain select t.number from t, t1, t2 where t1.number = t2.number and t.number = 1
----
EvalScalar
├── expressions: [t.number (#0)]
├── estimated rows: 0.00
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t1.number (#1)]
    ├── probe keys: [t2.number (#2)]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── TableScan(Build)
    │   ├── table: default.default.t1
    │   ├── read rows: 10
    │   ├── read bytes: 65
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 10.00
    └── HashJoin(Probe)
        ├── join type: CROSS
        ├── build keys: []
        ├── probe keys: []
        ├── filters: []
        ├── estimated rows: 0.00
        ├── Filter(Build)
        │   ├── filters: [t.number (#0) = 1]
        │   ├── estimated rows: 0.00
        │   └── TableScan
        │       ├── table: default.default.t
        │       ├── read rows: 0
        │       ├── read bytes: 0
        │       ├── partitions total: 1
        │       ├── partitions scanned: 0
        │       ├── pruning stats: [segments: <range pruning: 1 to 0>, blocks: <range pruning: 0 to 0, bloom pruning: 0 to 0>]
        │       ├── push downs: [filters: [t.number (#0) = 1], limit: NONE]
        │       └── estimated rows: 1.00
        └── TableScan(Probe)
            ├── table: default.default.t2
            ├── read rows: 100
            ├── read bytes: 172
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 100.00

# check outer join is converted to inner join

statement ok
drop table if exists onecolumn

statement ok
CREATE TABLE onecolumn (x INT NULL)

statement ok
INSERT INTO onecolumn(x) VALUES (44), (NULL), (42), (42)

statement ok
drop table if exists twocolumn

statement ok
CREATE TABLE twocolumn (x INT NULL, y INT NULL)

statement ok
INSERT INTO twocolumn(x, y) VALUES (44,51), (NULL,52), (42,53), (45,45)

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 42
----
EvalScalar
├── expressions: [a.x (#0), b.x (#1), b.y (#2)]
├── estimated rows: 2.40
└── HashJoin
    ├── join type: INNER
    ├── build keys: [a.x (#0)]
    ├── probe keys: [b.x (#1)]
    ├── filters: []
    ├── estimated rows: 2.40
    ├── Filter(Build)
    │   ├── filters: [is_true(a.x (#0) > 42)]
    │   ├── estimated rows: 3.00
    │   └── TableScan
    │       ├── table: default.default.onecolumn
    │       ├── read rows: 4
    │       ├── read bytes: 45
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    │       ├── push downs: [filters: [is_true(a.x (#0) > 42)], limit: NONE]
    │       └── estimated rows: 4.00
    └── Filter(Probe)
        ├── filters: [is_true(b.x (#1) > 42)]
        ├── estimated rows: 3.20
        └── TableScan
            ├── table: default.default.twocolumn
            ├── read rows: 4
            ├── read bytes: 94
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            ├── push downs: [filters: [is_true(b.x (#1) > 42)], limit: NONE]
            └── estimated rows: 4.00

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 44 or b.x < 43
----
EvalScalar
├── expressions: [a.x (#0), b.x (#1), b.y (#2)]
├── estimated rows: 1.82
└── HashJoin
    ├── join type: INNER
    ├── build keys: [a.x (#0)]
    ├── probe keys: [b.x (#1)]
    ├── filters: []
    ├── estimated rows: 1.82
    ├── Filter(Build)
    │   ├── filters: [is_true(a.x (#0) > 44 OR a.x (#0) < 43)]
    │   ├── estimated rows: 1.75
    │   └── TableScan
    │       ├── table: default.default.onecolumn
    │       ├── read rows: 4
    │       ├── read bytes: 45
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    │       ├── push downs: [filters: [is_true(a.x (#0) > 44 OR a.x (#0) < 43)], limit: NONE]
    │       └── estimated rows: 4.00
    └── Filter(Probe)
        ├── filters: [is_true(b.x (#1) > 44 OR b.x (#1) < 43)]
        ├── estimated rows: 2.08
        └── TableScan
            ├── table: default.default.twocolumn
            ├── read rows: 4
            ├── read bytes: 94
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            ├── push downs: [filters: [is_true(b.x (#1) > 44 OR b.x (#1) < 43)], limit: NONE]
            └── estimated rows: 4.00

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 42 and b.x < 45
----
EvalScalar
├── expressions: [a.x (#0), b.x (#1), b.y (#2)]
├── estimated rows: 2.56
└── HashJoin
    ├── join type: INNER
    ├── build keys: [b.x (#1)]
    ├── probe keys: [a.x (#0)]
    ├── filters: []
    ├── estimated rows: 2.56
    ├── Filter(Build)
    │   ├── filters: [is_true(b.x (#1) > 42), is_true(b.x (#1) < 45)]
    │   ├── estimated rows: 2.56
    │   └── TableScan
    │       ├── table: default.default.twocolumn
    │       ├── read rows: 4
    │       ├── read bytes: 94
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    │       ├── push downs: [filters: [and_filters(b.x (#1) > 42, b.x (#1) < 45)], limit: NONE]
    │       └── estimated rows: 4.00
    └── Filter(Probe)
        ├── filters: [is_true(a.x (#0) > 42), is_true(a.x (#0) < 45)]
        ├── estimated rows: 3.00
        └── TableScan
            ├── table: default.default.onecolumn
            ├── read rows: 4
            ├── read bytes: 45
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            ├── push downs: [filters: [and_filters(a.x (#0) > 42, a.x (#0) < 45)], limit: NONE]
            └── estimated rows: 4.00

# the following cases won't be converted to inner join

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 44 or a.x < 43
----
EvalScalar
├── expressions: [a.x (#0), b.x (#1), b.y (#2)]
├── estimated rows: 2.00
└── Filter
    ├── filters: [is_true(b.x (#1) > 44 OR a.x (#0) < 43)]
    ├── estimated rows: 2.00
    └── HashJoin
        ├── join type: LEFT OUTER
        ├── build keys: [b.x (#1)]
        ├── probe keys: [a.x (#0)]
        ├── filters: []
        ├── estimated rows: 4.00
        ├── TableScan(Build)
        │   ├── table: default.default.twocolumn
        │   ├── read rows: 4
        │   ├── read bytes: 94
        │   ├── partitions total: 1
        │   ├── partitions scanned: 1
        │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
        │   ├── push downs: [filters: [], limit: NONE]
        │   └── estimated rows: 4.00
        └── TableScan(Probe)
            ├── table: default.default.onecolumn
            ├── read rows: 4
            ├── read bytes: 45
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 4.00

query T
explain select * from onecolumn as a right join twocolumn as b on a.x = b.x where b.x > 42 and b.x < 45
----
EvalScalar
├── expressions: [a.x (#0), b.x (#1), b.y (#2)]
├── estimated rows: 3.41
└── HashJoin
    ├── join type: RIGHT OUTER
    ├── build keys: [b.x (#1)]
    ├── probe keys: [a.x (#0)]
    ├── filters: []
    ├── estimated rows: 3.41
    ├── Filter(Build)
    │   ├── filters: [is_true(b.x (#1) > 42), is_true(b.x (#1) < 45)]
    │   ├── estimated rows: 2.56
    │   └── TableScan
    │       ├── table: default.default.twocolumn
    │       ├── read rows: 4
    │       ├── read bytes: 94
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    │       ├── push downs: [filters: [and_filters(b.x (#1) > 42, b.x (#1) < 45)], limit: NONE]
    │       └── estimated rows: 4.00
    └── TableScan(Probe)
        ├── table: default.default.onecolumn
        ├── read rows: 4
        ├── read bytes: 45
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 4.00

statement ok
drop table t

statement ok
drop table t1

statement ok
drop table t2

statement ok
create table t1 (a int, b int)

statement ok
create table t2 (a int, b int)

query T
explain select * from t1 inner join t2 on t1.a = t2.a where t1.a > 10
----
EvalScalar
├── expressions: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── estimated rows: 0.00
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t2.a (#2)]
    ├── probe keys: [t1.a (#0)]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── Filter(Build)
    │   ├── filters: [t2.a (#2) > 10]
    │   ├── estimated rows: 0.00
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── read rows: 0
    │       ├── read bytes: 0
    │       ├── partitions total: 0
    │       ├── partitions scanned: 0
    │       ├── push downs: [filters: [t2.a (#2) > 10], limit: NONE]
    │       └── estimated rows: 0.00
    └── Filter(Probe)
        ├── filters: [t1.a (#0) > 10]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.a (#0) > 10], limit: NONE]
            └── estimated rows: 0.00

query T
explain select * from t1 inner join t2 on t1.a = t2.a where t1.a + t1.b> 10
----
EvalScalar
├── expressions: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── estimated rows: 0.00
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t2.a (#2)]
    ├── probe keys: [t1.a (#0)]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── TableScan(Build)
    │   ├── table: default.default.t2
    │   ├── read rows: 0
    │   ├── read bytes: 0
    │   ├── partitions total: 0
    │   ├── partitions scanned: 0
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 0.00
    └── Filter(Probe)
        ├── filters: [t1.a (#0) + t1.b (#1) > 10]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.a (#0) + t1.b (#1) > 10], limit: NONE]
            └── estimated rows: 0.00

query T
explain select * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b  where t2.a > 10
----
EvalScalar
├── expressions: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── estimated rows: 0.00
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t2.a (#2), t2.b (#3)]
    ├── probe keys: [t1.a (#0), t1.b (#1)]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── Filter(Build)
    │   ├── filters: [t2.a (#2) > 10]
    │   ├── estimated rows: 0.00
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── read rows: 0
    │       ├── read bytes: 0
    │       ├── partitions total: 0
    │       ├── partitions scanned: 0
    │       ├── push downs: [filters: [t2.a (#2) > 10], limit: NONE]
    │       └── estimated rows: 0.00
    └── Filter(Probe)
        ├── filters: [t1.a (#0) > 10]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.a (#0) > 10], limit: NONE]
            └── estimated rows: 0.00

query T
explain select * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b  where t2.a + t2.b> 10
----
EvalScalar
├── expressions: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── estimated rows: 0.00
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t2.a (#2), t2.b (#3)]
    ├── probe keys: [t1.a (#0), t1.b (#1)]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── Filter(Build)
    │   ├── filters: [t2.a (#2) + t2.b (#3) > 10]
    │   ├── estimated rows: 0.00
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── read rows: 0
    │       ├── read bytes: 0
    │       ├── partitions total: 0
    │       ├── partitions scanned: 0
    │       ├── push downs: [filters: [t2.a (#2) + t2.b (#3) > 10], limit: NONE]
    │       └── estimated rows: 0.00
    └── Filter(Probe)
        ├── filters: [t1.a (#0) + t1.b (#1) > 10]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.a (#0) + t1.b (#1) > 10], limit: NONE]
            └── estimated rows: 0.00

query T
explain select * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b  where t1.b + t1.a> 10
----
EvalScalar
├── expressions: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── estimated rows: 0.00
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t2.a (#2), t2.b (#3)]
    ├── probe keys: [t1.a (#0), t1.b (#1)]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── Filter(Build)
    │   ├── filters: [t2.b (#3) + t2.a (#2) > 10]
    │   ├── estimated rows: 0.00
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── read rows: 0
    │       ├── read bytes: 0
    │       ├── partitions total: 0
    │       ├── partitions scanned: 0
    │       ├── push downs: [filters: [t2.b (#3) + t2.a (#2) > 10], limit: NONE]
    │       └── estimated rows: 0.00
    └── Filter(Probe)
        ├── filters: [t1.b (#1) + t1.a (#0) > 10]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.b (#1) + t1.a (#0) > 10], limit: NONE]
            └── estimated rows: 0.00


query T
explain select * from t1, t2 where t1.a = t2.a and t1.b > t2.b
----
EvalScalar
├── expressions: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
├── estimated rows: 0.00
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t2.a (#2)]
    ├── probe keys: [t1.a (#0)]
    ├── filters: [t1.b (#1) > t2.b (#3)]
    ├── estimated rows: 0.00
    ├── TableScan(Build)
    │   ├── table: default.default.t2
    │   ├── read rows: 0
    │   ├── read bytes: 0
    │   ├── partitions total: 0
    │   ├── partitions scanned: 0
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 0.00
    └── TableScan(Probe)
        ├── table: default.default.t1
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 0.00

statement ok
drop table t1

statement ok
drop table t2


# https://github.com/datafuselabs/databend/issues/10523
statement ok
create table t1 as select * from numbers(1)

statement ok
set enable_cbo = 0

query I
select t1.number FROM
t1
CROSS JOIN
t1 AS t2,
t1 AS t3,
t1 AS t4,
t1 AS t5,
t1 AS t6,
t1 AS t7,
t1 AS t8,
t1 AS t9,
t1 AS t10,
t1 AS t11,
t1 AS t12,
t1 AS t13,
t1 AS t14,
t1 AS t15,
t1 AS t16,
t1 AS t17,
t1 AS t18,
t1 AS t19,
t1 AS t20
----
0

query I
SELECT t20.number
FROM
((((((((((((((((((
t1 AS t20
CROSS JOIN t1 AS t19)
CROSS JOIN t1 AS t18)
CROSS JOIN t1 AS t17)
CROSS JOIN t1 AS t16)
CROSS JOIN t1 AS t15)
CROSS JOIN t1 AS t14)
CROSS JOIN t1 AS t13)
CROSS JOIN t1 AS t12)
CROSS JOIN t1 AS t11)
CROSS JOIN t1 AS t10)
CROSS JOIN t1 AS t9)
CROSS JOIN t1 AS t8)
CROSS JOIN t1 AS t7)
CROSS JOIN t1 AS t6)
CROSS JOIN t1 AS t5)
CROSS JOIN t1 AS t4)
CROSS JOIN t1 AS t3)
CROSS JOIN t1 AS t2)
CROSS JOIN t1
----
0

statement ok
set enable_cbo = 1

statement ok
drop table t1

statement ok
CREATE TABLE IF NOT EXISTS onecolumn (x INT NULL);

statement ok
INSERT INTO onecolumn(x) VALUES (44), (NULL), (42);

statement ok
CREATE TABLE IF NOT EXISTS twocolumn (x INT NULL, y INT NULL);

statement ok
INSERT INTO twocolumn(x, y) VALUES (44,51), (NULL,52), (42,53), (45,45);

query T
explain SELECT o.x, t.y FROM onecolumn o INNER JOIN twocolumn t ON (o.x=t.x AND t.y=53);
----
EvalScalar
├── expressions: [o.x (#0), t.y (#2)]
├── estimated rows: 2.33
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t.x (#1)]
    ├── probe keys: [o.x (#0)]
    ├── filters: []
    ├── estimated rows: 2.33
    ├── Filter(Build)
    │   ├── filters: [is_true(t.y (#2) = 53)]
    │   ├── estimated rows: 1.00
    │   └── TableScan
    │       ├── table: default.default.twocolumn
    │       ├── read rows: 8
    │       ├── read bytes: 188
    │       ├── partitions total: 2
    │       ├── partitions scanned: 2
    │       ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 2 to 2>]
    │       ├── push downs: [filters: [is_true(t.y (#2) = 53)], limit: NONE]
    │       └── estimated rows: 8.00
    └── TableScan(Probe)
        ├── table: default.default.onecolumn
        ├── read rows: 7
        ├── read bytes: 86
        ├── partitions total: 2
        ├── partitions scanned: 2
        ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 0 to 0>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 7.00


statement ok
drop table onecolumn;

statement ok
drop table twocolumn;
