statement ok
set prefer_broadcast_join = 0

query T
explain select * from numbers(1) t, numbers(2) t1 where t.number = t1.number
----
Exchange
├── exchange type: Merge
└── EvalScalar
    ├── expressions: [t.number (#0), t1.number (#1)]
    ├── estimated rows: 2.00
    └── HashJoin
        ├── join type: INNER
        ├── build keys: [t.number (#0)]
        ├── probe keys: [t1.number (#1)]
        ├── filters: []
        ├── estimated rows: 2.00
        ├── Exchange(Build)
        │   ├── exchange type: Hash(t.number (#0))
        │   └── TableScan
        │       ├── table: default.system.numbers
        │       ├── read rows: 1
        │       ├── read bytes: 8
        │       ├── partitions total: 1
        │       ├── partitions scanned: 1
        │       ├── push downs: [filters: [], limit: NONE]
        │       └── estimated rows: 1.00
        └── Exchange(Probe)
            ├── exchange type: Hash(t1.number (#1))
            └── TableScan
                ├── table: default.system.numbers
                ├── read rows: 2
                ├── read bytes: 16
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 2.00

query T
explain select * from numbers(1) t, numbers(2) t1, numbers(3) t2 where t.number = t1.number and t.number = t2.number
----
Exchange
├── exchange type: Merge
└── EvalScalar
    ├── expressions: [t.number (#0), t1.number (#1), t2.number (#2)]
    ├── estimated rows: 6.00
    └── HashJoin
        ├── join type: INNER
        ├── build keys: [t.number (#0)]
        ├── probe keys: [t2.number (#2)]
        ├── filters: []
        ├── estimated rows: 6.00
        ├── Exchange(Build)
        │   ├── exchange type: Hash(t.number (#0))
        │   └── HashJoin
        │       ├── join type: INNER
        │       ├── build keys: [t.number (#0)]
        │       ├── probe keys: [t1.number (#1)]
        │       ├── filters: []
        │       ├── estimated rows: 2.00
        │       ├── Exchange(Build)
        │       │   ├── exchange type: Hash(t.number (#0))
        │       │   └── TableScan
        │       │       ├── table: default.system.numbers
        │       │       ├── read rows: 1
        │       │       ├── read bytes: 8
        │       │       ├── partitions total: 1
        │       │       ├── partitions scanned: 1
        │       │       ├── push downs: [filters: [], limit: NONE]
        │       │       └── estimated rows: 1.00
        │       └── Exchange(Probe)
        │           ├── exchange type: Hash(t1.number (#1))
        │           └── TableScan
        │               ├── table: default.system.numbers
        │               ├── read rows: 2
        │               ├── read bytes: 16
        │               ├── partitions total: 1
        │               ├── partitions scanned: 1
        │               ├── push downs: [filters: [], limit: NONE]
        │               └── estimated rows: 2.00
        └── Exchange(Probe)
            ├── exchange type: Hash(t2.number (#2))
            └── TableScan
                ├── table: default.system.numbers
                ├── read rows: 3
                ├── read bytes: 24
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 3.00

query T
explain select * from (select number as a, number+1 as b from numbers(1)) t, numbers(2) t1, numbers(3) t2 where a = t1.number and b = t2.number
----
Exchange
├── exchange type: Merge
└── EvalScalar
    ├── expressions: [t.a (#0), t.b (#1), t1.number (#2), t2.number (#3)]
    ├── estimated rows: 6.00
    └── HashJoin
        ├── join type: INNER
        ├── build keys: [t1.number (#2)]
        ├── probe keys: [t.a (#0)]
        ├── filters: []
        ├── estimated rows: 6.00
        ├── Exchange(Build)
        │   ├── exchange type: Hash(t1.number (#2))
        │   └── TableScan
        │       ├── table: default.system.numbers
        │       ├── read rows: 2
        │       ├── read bytes: 16
        │       ├── partitions total: 1
        │       ├── partitions scanned: 1
        │       ├── push downs: [filters: [], limit: NONE]
        │       └── estimated rows: 2.00
        └── Exchange(Probe)
            ├── exchange type: Hash(t.a (#0))
            └── HashJoin
                ├── join type: INNER
                ├── build keys: [t.b (#1)]
                ├── probe keys: [t2.number (#3)]
                ├── filters: []
                ├── estimated rows: 3.00
                ├── Exchange(Build)
                │   ├── exchange type: Hash(t.b (#1))
                │   └── EvalScalar
                │       ├── expressions: [numbers.number (#0), numbers.number (#0) + 1]
                │       ├── estimated rows: 1.00
                │       └── TableScan
                │           ├── table: default.system.numbers
                │           ├── read rows: 1
                │           ├── read bytes: 8
                │           ├── partitions total: 1
                │           ├── partitions scanned: 1
                │           ├── push downs: [filters: [], limit: NONE]
                │           └── estimated rows: 1.00
                └── Exchange(Probe)
                    ├── exchange type: Hash(t2.number (#3))
                    └── TableScan
                        ├── table: default.system.numbers
                        ├── read rows: 3
                        ├── read bytes: 24
                        ├── partitions total: 1
                        ├── partitions scanned: 1
                        ├── push downs: [filters: [], limit: NONE]
                        └── estimated rows: 3.00

query T
explain select * from (select sum(number) as number from numbers(1) group by number) t, numbers(2) t1 where t.number = t1.number
----
Exchange
├── exchange type: Merge
└── EvalScalar
    ├── expressions: [t.number (#3), t1.number (#4)]
    ├── estimated rows: 2.00
    └── HashJoin
        ├── join type: INNER
        ├── build keys: [t.number (#3)]
        ├── probe keys: [CAST(t1.number (#4) AS UInt64 NULL)]
        ├── filters: []
        ├── estimated rows: 2.00
        ├── Exchange(Build)
        │   ├── exchange type: Hash(t.number (#3))
        │   └── EvalScalar
        │       ├── expressions: [sum(number) (#2)]
        │       ├── estimated rows: 1.00
        │       └── AggregateFinal
        │           ├── group by: [number]
        │           ├── aggregate functions: [sum(number)]
        │           ├── estimated rows: 1.00
        │           └── Exchange
        │               ├── exchange type: Hash(_group_by_key)
        │               └── AggregatePartial
        │                   ├── group by: [number]
        │                   ├── aggregate functions: [sum(number)]
        │                   ├── estimated rows: 1.00
        │                   └── EvalScalar
        │                       ├── expressions: [numbers.number (#0), numbers.number (#0)]
        │                       ├── estimated rows: 1.00
        │                       └── TableScan
        │                           ├── table: default.system.numbers
        │                           ├── read rows: 1
        │                           ├── read bytes: 8
        │                           ├── partitions total: 1
        │                           ├── partitions scanned: 1
        │                           ├── push downs: [filters: [], limit: NONE]
        │                           └── estimated rows: 1.00
        └── Exchange(Probe)
            ├── exchange type: Hash(CAST(t1.number (#4) AS UInt64 NULL))
            └── TableScan
                ├── table: default.system.numbers
                ├── read rows: 2
                ├── read bytes: 16
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 2.00

query T
explain fragments select * from (select sum(number) as number from numbers(1) group by number) t, numbers(2) t1 where t.number = t1.number
----
Fragment 0:
  DataExchange: Shuffle
    ExchangeSink
    ├── destination fragment: [3]
    └── TableScan
        ├── table: default.system.numbers
        ├── read rows: 2
        ├── read bytes: 16
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 2.00
(empty)
(empty)
Fragment 1:
  DataExchange: Shuffle
    ExchangeSink
    ├── destination fragment: [2]
    └── AggregatePartial
        ├── group by: [number]
        ├── aggregate functions: [sum(number)]
        ├── estimated rows: 1.00
        └── EvalScalar
            ├── expressions: [numbers.number (#0), numbers.number (#0)]
            ├── estimated rows: 1.00
            └── TableScan
                ├── table: default.system.numbers
                ├── read rows: 1
                ├── read bytes: 8
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 1.00
(empty)
(empty)
Fragment 2:
  DataExchange: Shuffle
    ExchangeSink
    ├── destination fragment: [3]
    └── EvalScalar
        ├── expressions: [sum(number) (#2)]
        ├── estimated rows: 1.00
        └── AggregateFinal
            ├── group by: [number]
            ├── aggregate functions: [sum(number)]
            ├── estimated rows: 1.00
            └── ExchangeSource
                └── source fragment: [1]
(empty)
(empty)
Fragment 3:
  DataExchange: Merge
    ExchangeSink
    ├── destination fragment: [4]
    └── EvalScalar
        ├── expressions: [t.number (#3), t1.number (#4)]
        ├── estimated rows: 2.00
        └── HashJoin
            ├── join type: INNER
            ├── build keys: [t.number (#3)]
            ├── probe keys: [CAST(t1.number (#4) AS UInt64 NULL)]
            ├── filters: []
            ├── estimated rows: 2.00
            ├── ExchangeSource(Build)
            │   └── source fragment: [2]
            └── ExchangeSource(Probe)
                └── source fragment: [0]
(empty)
(empty)
Fragment 4:
    ExchangeSource
    └── source fragment: [3]
(empty)

statement ok
set prefer_broadcast_join = 1
