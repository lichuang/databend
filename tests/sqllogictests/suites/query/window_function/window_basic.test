statement ok
CREATE DATABASE IF NOT EXISTS test_window_basic

statement ok
USE test_window_basic

statement ok
DROP TABLE IF EXISTS empsalary

statement ok
CREATE TABLE empsalary (depname string, empno bigint, salary int, enroll_date date)

statement ok
INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15')

# basic example from postgres' window.sql
query TIIR
SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno
----
develop 7 4200 4200
develop 8 6000 10200
develop 9 4500 14700
develop 10 5200 19900
develop 11 5200 25100
personnel 2 3900 3900
personnel 5 3500 7400
sales 1 5000 5000
sales 3 4800 9800
sales 4 4800 14600


# sum
query R
SELECT sum(salary) OVER (PARTITION BY depname ORDER BY salary) ss FROM empsalary ORDER BY depname, ss
----
4200
8700
19100
19100
25100
3500
7400
9600
9600
14600

# row_number
query I
SELECT row_number() OVER (PARTITION BY depname ORDER BY salary) rn FROM empsalary ORDER BY depname, rn
----
1
2
3
4
5
1
2
1
2
3

# rank_dense
query TII
SELECT depname, salary, dense_rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop 4200 1
develop 4500 2
develop 5200 3
develop 5200 3
develop 6000 4
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 2

# rank
query TII
SELECT depname, salary, rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop 4200 1
develop 4500 2
develop 5200 3
develop 5200 3
develop 6000 5
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 3

# percent_rank
query TII
SELECT depname, salary, percent_rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop 4200 0.0
develop 4500 0.25
develop 5200 0.5
develop 5200 0.5
develop 6000 1.0
personnel 3500 0.0
personnel 3900 1.0
sales 4800 0.0
sales 4800 0.0
sales 5000 1.0

# row_number
query I
SELECT row_number() OVER (PARTITION BY depname ORDER BY salary) rn FROM empsalary ORDER BY depname, rn
----
1
2
3
4
5
1
2
1
2
3

# rank_dense
query TII
SELECT depname, salary, dense_rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop 4200 1
develop 4500 2
develop	5200 3
develop	5200 3
develop 6000 4
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 2

# rank
query TII
SELECT depname, salary, rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop 4200 1
develop 4500 2
develop 5200 3
develop 5200 3
develop 6000 5
personnel 3500 1
personnel 3900 2
sales 4800 1
sales 4800 1
sales 5000 3

# lag ignore default value
query II
SELECT salary, lag(salary, 2) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 NULL
6000 NULL
3900 5000
5200 6000
4800 3900
4800 5200
5200 4800
3500 4800
4200 5200
4500 3500

# lag with constant default value
query II
SELECT salary, lag(salary, 2, 888) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 888
6000 888
3900 5000
5200 6000
4800 3900
4800 5200
5200 4800
3500 4800
4200 5200
4500 3500

# lag with column default value
query II
SELECT salary, lag(salary, 2, salary) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 5000
6000 6000
3900 5000
5200 6000
4800 3900
4800 5200
5200 4800
3500 4800
4200 5200
4500 3500

# lead ignore default value
query II
SELECT salary, lead(salary, 2) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 3900
6000 5200
3900 4800
5200 4800
4800 5200
4800 3500
5200 4200
3500 4500
4200 NULL
4500 NULL

# lead with constant default value
query II
SELECT salary, lead(salary, 2, 888) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 3900
6000 5200
3900 4800
5200 4800
4800 5200
4800 3500
5200 4200
3500 4500
4200 888
4500 888

# lead with column default value
query II
SELECT salary, lead(salary, 2, salary) OVER (ORDER BY enroll_date) FROM empsalary
----
5000 3900
6000 5200
3900 4800
5200 4800
4800 5200
4800 3500
5200 4200
3500 4500
4200 4200
4500 4500

# min/max/avg
query TIIR
SELECT depname, min(salary) OVER (PARTITION BY depname ORDER BY salary, empno) m1, max(salary) OVER (PARTITION BY depname ORDER BY salary, empno) m2, AVG(salary) OVER (PARTITION BY depname ORDER BY salary, empno) m3 FROM empsalary ORDER BY depname, empno
----
develop 4200 4200 4200.0
develop 4200 6000 5020.0
develop 4200 4500 4350.0
develop 4200 5200 4633.333333333333
develop 4200 5200 4775.0
personnel 3500 3900 3700.0
personnel 3500 3500 3500.0
sales 4800 5000 4866.666666666667
sales 4800 4800 4800.0
sales 4800 4800 4800.0


# stddev_pop
query TR
SELECT depname, STDDEV_POP(salary) OVER (PARTITION BY depname ORDER BY salary, empno) s FROM empsalary ORDER BY depname, empno
----
develop 0.0
develop 627.3754856543248
develop 150.0
develop 418.99350299921787
develop 438.0353866983808
personnel 200.0
personnel 0.0
sales 94.28090415820634
sales 0.0
sales 0.0

# covar_pop
query TR
SELECT depname, COVAR_POP(salary, empno) OVER (PARTITION BY depname ORDER BY salary, empno) c FROM empsalary ORDER BY depname, empno
----
develop 0.0
develop 240.00000000000017
develop 150.0
develop 477.777777777778
develop 606.2500000000002
personnel -300.0
personnel 0.0
sales -111.11111111111086
sales 0.0
sales 0.0

# aggregate functions in window clause
query TII
select depname, sum(sum(salary)) over (partition by 1 order by sum(salary)), sum(salary) from empsalary group by depname;
----
personnel 7400 7400
sales 22000 14600
develop 47100 25100

query TI
select depname, sum(sum(salary)) over (partition by 1 order by sum(salary)) from empsalary group by depname;
----
personnel 7400
sales 22000
develop 47100

query III
select grouping(salary), grouping(depname), sum(grouping(salary)) over (partition by grouping(salary) + grouping(depname) order by grouping(depname) desc) from empsalary group by rollup (depname, salary);
----
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
1 0 3
1 0 3
1 0 3
1 1 1

# Window func in subquery
query I
SELECT * FROM (SELECT row_number() OVER (PARTITION BY depname ORDER BY salary) rn FROM empsalary ORDER BY depname, rn)
----
1
2
3
4
5
1
2
1
2
3

# Window func in order by
query II
SELECT salary, sum(salary) OVER (PARTITION BY depname) FROM empsalary ORDER BY count() OVER (PARTITION BY depname ORDER BY salary) DESC
----
6000 25100
5200 25100
5200 25100
5000 14600
4500 25100
3900 7400
4800 14600
4800 14600
4200 25100
3500 7400

# diff windows
query II
SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname ORDER BY empno), sum(salary) OVER (PARTITION BY empno ORDER BY depname) FROM empsalary ORDER BY depname, empno
----
develop 7 4200 4200 4200
develop 8 6000 10200 6000
develop 9 4500 14700 4500
develop 10 5200 19900 5200
develop 11 5200 25100 5200
personnel 2 3900 3900 3900
personnel 5 3500 7400 3500
sales 1 5000 5000 5000
sales 3 4800 9800 4800
sales 4 4800 14600 4800

statement ok
DROP DATABASE test_window_basic
